% label, order, mem_free
host(a, 1, 4).
host(b, 2, 4).
host(c, 3, 4).
host(d, 4, 4).

% label, mem_used
inst_mem(1, 1).
inst_mem(2, 2).
inst_mem(3, 2).
%inst_mem(4, 4).

% Affinities
affinity(1, 2).
antiaffinity(2, 3).
host_cap(a, sriov).
inst_cap(1, sriov).

% Unpack the above into separate predicates
% In a machine-generated problem it's probably easier to skip the packed form.
host(H) :- host(H, _, _).
host_ord(H, O) :- host(H, O, _).
host_mem(H, F) :- host(H, _, F).
inst(I) :- inst_mem(I, _).


% Each IM must be placed on exactly 1 host
% s is short for solution, IE a placing of an instance on a host
1 { s(H,I): host(H) } 1 :- inst(I).

% The instances on a host may not use more memory than is available
0 #sum { USED,s: s(H,I): inst_mem(I,USED) } FREE :- host_mem(H, FREE).

% Stack by trying to keep high numbered hosts empty.
#minimize { U@O: s(H,I), inst_mem(I, U), host_ord(H,O) }.

% Affinities
s(H,IA) :- s(H,IB), affinity(IA,IB).
not s(H,IA) :- host(H), s(H,IB), antiaffinity(IA,IB).
s(H,I) :- inst_cap(I,C), host_cap(H,C).

#show s/2.
